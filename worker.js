const{parentPort,workerData}=require("worker_threads"),crypto=require("crypto"),{ec}=require("elliptic"),ecInstance=new ec("secp256k1"),getRandomKeyInRange=(e,t)=>e+BigInt("0x"+crypto.randomBytes(32).toString("hex"))%(t-e),{workerId,start,end}=workerData,N=1e7,matchRIPEMD160Prefix="739437bb3dd",privateKeyToRIPEMD160=e=>crypto.createHash("ripemd160").update(crypto.createHash("sha256").update(Buffer.from(ecInstance.keyFromPrivate(e,"hex").getPublic(!0,"hex"),"hex")).digest()).digest("hex");let iterationCount=0;for(;;){const e=getRandomKeyInRange(BigInt(start),BigInt(end)),t=e.toString(16).padStart(64,"0"),r=privateKeyToRIPEMD160(t);++iterationCount%N==0&&console.log(`Worker ${workerId} - Iteration ${iterationCount}: Private Key: ${t}, RIPEMD-160: ${r}`),r.startsWith(matchRIPEMD160Prefix)&&(parentPort.postMessage({workerId,match:!0,privateKey:t,ripemd160Hash:r}),process.exit(0))}parentPort.postMessage({workerId,match:!1});
