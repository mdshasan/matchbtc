const {Worker,isMainThread}=require("worker_threads"),path=require("path");if(isMainThread){const targetAddressPrefix="1BY8GQbn",startHex="000000000000000000000000000000000000000000000004aaaaaaaaaaaaaaaa",endHex="000000000000000000000000000000000000000000000006ffffffffffffffff",startKey=BigInt("0x"+startHex),endKey=BigInt("0x"+endHex),NUM_WORKERS=2,rangePerWorker=(endKey-startKey)/BigInt(NUM_WORKERS);function startWorker(workerId,start,end){return new Promise((resolve,reject)=>{const worker=new Worker(path.resolve(__dirname,"worker.js"),{workerData:{workerId,start,end,targetAddressPrefix}});worker.on("message",message=>{message.match?(console.log(`Worker ${message.workerId} found a match!`),console.log(`Private Key: ${message.privateKey}, Bitcoin Address: ${message.bitcoinAddress}`),resolve(!0)):resolve(!1)}),worker.on("error",reject),worker.on("exit",code=>{0!==code&&reject(new Error(`Worker stopped with exit code ${code}`))})})}(async()=>{const workers=[];for(let i=0;i<NUM_WORKERS;i++){const workerStart=startKey+BigInt(i)*rangePerWorker,workerEnd=i===NUM_WORKERS-1?endKey:workerStart+rangePerWorker-1n;workers.push(startWorker(i+1,workerStart,workerEnd))}const results=await Promise.all(workers);results.includes(!0)||console.log("No match found across all workers.")})()}
